'use strict';

const fs = require('fs');
const edge = require('edge-js');
const logger = require('@pai/config/logger');

// Public and Private key must be generated by RSA with at least 2048 bits key size.
const tokenPublicKeyPemFile = process.env.MT_TOKEN_PUBLIC_KEY_PEM_FILE;
// Using ApSecretStore dll to decrypt the private keys and certificate file.
const apSecretStoreDllFile = process.env.AP_SECRET_STORE_DLL_FILE;
const tokenPrivateKeyPemEncrFile = process.env.MT_TOKEN_PRIVATE_KEY_PEM_ENCR_FILE;
const serverPrivateKeyPemEncrFile = process.env.MT_SERVER_PRIVATE_KEY_PEM_ENCR_FILE;
const serverCertificatePemEncrFile = process.env.MT_SERVER_CERTIFICATE_PEM_ENCR_FILE;
// Should only be used by unit test
const tokenPrivateKeyPemFile = process.env.MT_TOKEN_PRIVATE_KEY_PEM_FILE;
const serverPrivateKeyPemFile = process.env.MT_SERVER_PRIVATE_KEY_PEM_FILE;
const serverCertificatePemFile = process.env.MT_SERVER_CERTIFICATE_PEM_FILE;

function getDecryptFunction() {
    try {
        const decrypt = edge.func({
            references: [apSecretStoreDllFile],
            source: function() {/*
                using System;
                using System.Threading.Tasks;
                using Microsoft.Search.Autopilot.Security;

                public class Startup
                {
                    public async Task<object> Invoke(byte[] encrypted)
                    {
                        ApSecretProtection asp = new ApSecretProtection();
                        return asp.Decrypt(encrypted);
                    }
                }*/
            },
        });
        return decrypt;
    } catch (err) {
        throw new Error('Failed to get decrypt function: ' + err);
    }
}
const decrypt = apSecretStoreDllFile ? getDecryptFunction() : null;
function decryptFile(encryptedFile) {
    logger.info(
        `Start to decrypt the file by:
        [${apSecretStoreDllFile}]
        [${encryptedFile}]`
    );
    const encrypted = fs.readFileSync(encryptedFile);
    return decrypt(encrypted, true);
}

function getTokenPrivateKey() {
    if (apSecretStoreDllFile && tokenPrivateKeyPemEncrFile) {
        return decryptFile(tokenPrivateKeyPemEncrFile);
    } else if (tokenPrivateKeyPemFile) {
        return fs.readFileSync(tokenPrivateKeyPemFile);
    } else {
        throw new Error(
            'Envs AP_SECRET_STORE_DLL_FILE + MT_TOKEN_PRIVATE_KEY_PEM_ENCR_FILE or ' +
            'MT_TOKEN_PRIVATE_KEY_PEM_FILE is required'
        );
    }
}

function getServerPrivateKey() {
    if (apSecretStoreDllFile && serverPrivateKeyPemEncrFile) {
        return decryptFile(serverPrivateKeyPemEncrFile);
    } else if (serverPrivateKeyPemFile) {
        return fs.readFileSync(serverPrivateKeyPemFile);
    } else {
        throw new Error(
            'Envs AP_SECRET_STORE_DLL_FILE + MT_SERVER_PRIVATE_KEY_PEM_ENCR_FILE or ' +
            'MT_SERVER_PRIVATE_KEY_PEM_FILE is required'
        );
    }
}

function getServerCertificate() {
    if (apSecretStoreDllFile && serverCertificatePemEncrFile) {
        return decryptFile(serverCertificatePemEncrFile);
    } else if (serverCertificatePemFile) {
        return fs.readFileSync(serverCertificatePemFile);
    } else {
        throw new Error(
            'Envs AP_SECRET_STORE_DLL_FILE + MT_SERVER_CERTIFICATE_PEM_ENCR_FILE or ' +
            'MT_SERVER_CERTIFICATE_PEM_FILE is required'
        );
    }
}

const tokenPublicKey = fs.readFileSync(tokenPublicKeyPemFile);
const tokenPrivateKey = getTokenPrivateKey();
const serverCertificate = getServerCertificate();
const serverPrivateKey = getServerPrivateKey();

module.exports = {
    tokenPublicKey,
    tokenPrivateKey,
    serverCertificate,
    serverPrivateKey,
};
